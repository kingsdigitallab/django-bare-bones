---
# Install and configure system packages
# run as root
- hosts: all
  vars_files:
    - vars.yml
  gather_facts: false
  become: yes

  tasks:
  - name: fix debian sudoers file
    lineinfile:
      path: /etc/sudoers
      backup: yes
      regexp: "^%sudo\\s+ALL=\\(ALL:ALL\\)\\s+ALL$"
      line: "%sudo   ALL=(ALL) NOPASSWD: ALL"
    tags:
      - system

  - name: apt | install https transport for apt
    apt:
      pkg: apt-transport-https
      state: present
      update_cache: yes
    tags:
      -system

  - name: apt | add elasticsearch key
    apt_key:
      url: https://artifacts.elastic.co/GPG-KEY-elasticsearch
      state: present
    tags:
      - system

  - name: apt | add elasticsearch sources
    apt_repository:
      repo: 'deb https://artifacts.elastic.co/packages/5.x/apt stable main'
      state: present
    tags:
      - system

  - name: apt | install required system packages
    apt:
      pkg: '{{ system_packages }}'
      state: present
      update_cache: yes
    tags:
      - system

  - name: Upgrade all packages to the latest version
    apt:
      upgrade: yes
    tags:
      - system

  - name: zsh | clone oh-my-zsh repo
    git: repo={{ zsh.oh_my_zsh }} dest={{ user_home }}/.oh-my-zsh
    tags:
      - system

  - name: zsh | deploy .zshrc
    copy: src={{ zsh.zshrc }} dest={{ user_home }}/.zshrc owner=vagrant
    tags:
      - system

  - name: zsh | as default shell
    user: name=vagrant shell=/bin/zsh
    tags:
      - system

  - name: motd | clean existing
    shell: 'rm -rf /etc/update-motd.d/*'
    tags:
      - system

  - name: motd | deploy motd
    copy: src={{ motd.file }} dest=/etc/update-motd.d/00-kdl owner=root
    tags:
      - system

  - name: motd | permissions
    shell: 'chmod +x /etc/update-motd.d/*'
    tags:
      - system

  - name: python | install pipenv
    pip:
      name: pipenv
      state: latest
    tags:
      - python

  - name: npm | upgrade node.js and npm
    npm:
      name: "n"
      global: true
    tags:
      - system
      - javascript
  - command: "n stable"
    tags:
      - system
      - javascript

# Python and Javascript Package Managers
# run as vagrant

- hosts: all
  vars_files:
    - vars.yml
  gather_facts: false

  tasks:
  - name: python | lock pipfiles packages
    # for second and later deployments (Pipfile already exists)
    command: "pipenv lock"
    args:
      chdir: "{{ project_root }}"
    tags:
      - python

  - name: python | install packages from Pipfiles
    # for second and later deployments (Pipfile already exists)
    command: "pipenv sync -d"
    args:
      chdir: "{{ project_root }}"
    tags:
      - python

  - name: npm | create dummy package.json
    # this creates a dummy package.json. Needed for all other npm commands.
    command: "npm init -y"
    args:
      chdir: "{{ project_root }}"
      creates: "{{ project_root }}/package.json"
    tags:
      - javascript

  - name: npm | install original javascript packages from vars.yml
    # only for the initial setup of the repository
    # it will install packages selected during bare-bone bootstrap
    command: "npm i {{ npm.original_packages }}"
    args:
      chdir: "{{ project_root }}"
      creates: "{{ project_root }}/package-lock.json"
    tags:
      - javascript

  - name: npm | install javascript packages from package.json
    npm:
      path: "{{ project_root }}"
    tags:
      - javascript

# Database Management
# run as root

- hosts: all
  vars_files:
    - vars.yml
  # gather_facts: false
  become: yes
  tasks:
  - name: postgresql | setup gb locale
    locale_gen:
      name: "{{ postgresql.locale }}"
      state: present
    tags:
      - db

  - name: postgresql | get installed version
    shell: 'ls /etc/postgresql/*/main/pg_hba.conf | cut -d / -f4'
    register: postgresql_version
    tags:
      - db

  - name: postgresql | ensure postgresql user can authenticate
    lineinfile:
      path: /etc/postgresql/{{ postgresql_version.stdout }}/main/pg_hba.conf
      backup: yes
      regexp: "^local\\s+all\\s+{{ postgresql.admin_user }}\\s+peer$"
      line: "local    all    {{ postgresql.admin_user }}    {{ postgresql.default_auth_method }}"
    tags:
      - db

  - name: postgresql | ensure all users can authenticate
    lineinfile:
      path: /etc/postgresql/{{ postgresql_version.stdout }}/main/pg_hba.conf
      backup: yes
      regexp: "^local\\s+all\\s+all\\s+peer$"
      line: "local    all    all    {{ postgresql.default_auth_method }}"
    notify:
      - postgresql | restart postgres
    tags:
      - db

  - name: elasticsearch | change JVM Heap To start at 256M
    lineinfile:
      path: /etc/elasticsearch/jvm.options
      backup: yes
      regexp: "^-Xms2g$"
      line: "-Xms256m"
    notify:
      - elasticsearch | restart elasticsearch
    tags:
      - db

  handlers:
  - name: postgresql | restart postgres
    service:
      name: postgresql
      state: restarted
    tags:
      - db

  - name: elasticsearch | restart elasticsearch
    service:
      name: elasticsearch
      state: started
    tags:
      - db

# Database (user, data)
# run as postgres & vagrant

- hosts: all
  vars_files:
    - vars.yml
  tasks:
  - name: postgresql | create user
    become_user: "{{ postgresql.admin_user }}"
    postgresql_user:
      user: "{{ postgresql.user }}"
      password: "{{ app.name }}"
      role_attr_flags: CREATEDB # NOSUPERUSER NOCREATEROLE
    tags:
      - db

  - name: postgresql | create db
    become_user: "{{ postgresql.admin_user }}"
    postgresql_db:
      name: "{{ app.name }}"
      encoding: "{{postgresql.encoding}}"
      lc_collate: "{{postgresql.locale}}"
      lc_ctype: "{{postgresql.locale}}"
      template: "template0"
      state: present
      owner: "{{ postgresql.user }}"
    notify:
      - postgresql | apply privileges
    tags:
      - db

  - name: check if initial data file exists
    stat:
      path: "{{ project_root }}/.vagrant_provisioning/{{ postgresql.initial_data_file }}"
    register: idf
    tags:
      - db
      - data

  - name: posgresql | load initial data file
    command: psql -U {{ postgresql.user }} -d {{ app.name }} -f {{ project_root }}/.vagrant_provisioning/{{ postgresql.initial_data_file }}
    when: idf.stat.exists
    notify:
      - postgresql | apply privileges after data import
    tags:
      - db
      - data

  - name: posgresql | create postgis extension if available
    become_user: "{{ postgresql.admin_user }}"
    command: psql -U {{ postgresql.admin_user }} -d {{ app.name }} -c "CREATE EXTENSION IF NOT EXISTS postgis;"
    tags:
      - db
      - data

  handlers:
  - name: postgresql | apply privileges
    become_user: "{{ postgresql.admin_user }}"
    postgresql_privs:
      db: "{{ app.name }}"
      privs: ALL
      roles: "{{ postgresql.user }}"
      state: present
      type: database
    tags:
      - db
      - data

  - name: postgresql | apply privileges after data import
    become_user: "{{ postgresql.admin_user }}"
    postgresql_privs:
      db: "{{ app.name }}"
      objs: ALL_IN_SCHEMA
      privs: ALL
      roles: "{{ postgresql.user }}"
      state: present
      type: table
    tags:
      - db
      - data

# Django
# run as vagrant
- hosts: all
  vars_files:
    - vars.yml
  tasks:
  - name: django | default local settings
    copy: src=local_settings.py dest={{ project_root }}/{{ app.name }}/settings/local.py owner=vagrant
    tags:
      - django

  - name: django | migrations
    command: "pipenv run python manage.py makemigrations"
    args:
      chdir: "{{ project_root }}"
  - command: "pipenv run python manage.py migrate"
    args:
      chdir: "{{ project_root }}"
    tags:
      - django

  - name: django | add default (vagrant/vagrant) superuser
    command: "pipenv run python manage.py shell -c \"from django.contrib.auth.models import User; User.objects.create_superuser('vagrant', 'vagrant@localhost', 'vagrant')\""
    args:
      chdir: "{{ project_root }}"
    ignore_errors: yes # The user may already exist
    tags:
      - django

# GIT config
# run as vagrant
- hosts: all
  vars_files:
      - vars.yml
  tasks:
  - name: git | init
    command: "git init"
    args:
      chdir: "{{ project_root }}"
    tags:
      - git

  - name: git | flake8 pre-commit hook
    command: "pipenv run flake8 --install-hook=git"
    ignore_errors: yes # Stop errors if it already exists
    args:
      chdir: "{{ project_root }}"
  - command: "git config flake8.strict True"
    args:
      chdir: "{{ project_root }}"
    tags:
      - git
